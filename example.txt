       1  "use client";
       2  
       3  import { useState } from "react";
       4  import { trpc } from "@/app/_trpc/client";
       5  import { Button } from "@/components/ui/button";
       6  import { Check, Plus, Trash2, X } from "lucide-react";
       7  
       8  interface Todo {
       9    id: number;
      10    content: string;
      11    done: number;
      12    customerId: number;
      13  }
      14  
      15  export default function TodoList({ customerId }: { customerId: number }) {
      16    const [newTodoContent, setNewTodoContent] = useState("");
      17    
      18    // Fetch todos for the customer
      19    const { data: todos, isLoading, refetch } = trpc.getTodos.useQuery({ 
      20      customerId 
      21    });
      22    
      23    // Create a new todo
      24    const createTodo = trpc.createTodo.useMutation({
      25      onSuccess: () => {
      26        setNewTodoContent("");
      27        refetch();
      28      },
      29    });
      30    
      31    // Delete a todo
      32    const deleteTodo = trpc.deleteTodo.useMutation({
      33      onSuccess: () => {
      34        refetch();
      35      },
      36    });
      37    
      38    // Toggle a todo completion status
      39    const toggleTodo = trpc.toggleTodo.useMutation({
      40      onSuccess: () => {
      41        refetch();
      42      },
      43    });
      44    
      45    const handleCreateTodo = () => {
      46      if (newTodoContent.trim()) {
      47        createTodo.mutate({
      48          content: newTodoContent,
      49          customerId,
      50        });
      51      }
      52    };
      53    
      54    if (isLoading) {
      55      return <div className="p-4">Loading todos...</div>;
      56    }
      57    
      58    return (
      59      <div className="w-full max-w-2xl mx-auto">
      60        <div className="flex items-center gap-2 mb-6">
      61          <input
      62            type="text"
      63            value={newTodoContent}
      64            onChange={(e) => setNewTodoContent(e.target.value)}
      65            placeholder="Add a new todo..."
      66            className="flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 fo
         cus-visible:ring-ring"
      67            onKeyDown={(e) => {
      68              if (e.key === "Enter") {
      69                handleCreateTodo();
      70              }
      71            }}
      72          />
      73          <Button 
      74            onClick={handleCreateTodo}
      75            disabled={!newTodoContent.trim() || createTodo.isPending}
      76          >
      77            <Plus className="h-4 w-4" />
      78            Add
      79          </Button>
      80        </div>
      81        
      82        <div className="space-y-2">
      83          {todos && todos.length > 0 ? (
      84            todos.map((todo) => (
      85              <div
      86                key={todo.id}
      87                className="flex items-center justify-between p-3 bg-white border rounded-md shadow-sm hover:shadow-md transition-shadow"
      88              >
      89                <div className="flex items-center gap-3">
      90                  <Button
      91                    variant="ghost"
      92                    size="icon"
      93                    className="h-8 w-8 rounded-full"
      94                    onClick={() => toggleTodo.mutate({ id: todo.id })}
      95                    disabled={toggleTodo.isPending}
      96                  >
      97                    {todo.done === 1 ? (
      98                      <Check className="h-4 w-4 text-green-500" />
      99                    ) : (
     100                      <X className="h-4 w-4 text-gray-300" />
     101                    )}
     102                  </Button>
     103                  <span className={todo.done === 1 ? "line-through text-gray-500" : ""}>
     104                    {todo.content}
     105                  </span>
     106                </div>
     107                <Button
     108                  variant="ghost"
     109                  size="icon"
     110                  className="h-8 w-8 rounded-full text-red-500 hover:bg-red-50"
     111                  onClick={() => deleteTodo.mutate({ id: todo.id })}
     112                  disabled={deleteTodo.isPending}
     113                >
     114                  <Trash2 className="h-4 w-4" />
     115                </Button>
     116              </div>
     117            ))
     118          ) : (
     119            <div className="p-4 text-center text-gray-500">
     120              No todos yet. Add your first todo above!
     121            </div>
     122          )}
     123        </div>
     124      </div>
     125    );
     126  }